// <auto-generated />
using System;
using DB_First;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DB_First.Migrations
{
    [DbContext(typeof(LibraryContext))]
    partial class LibraryContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DB_First.Category", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("DB_First.Concrete.Author", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.HasKey("Id");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("DB_First.Concrete.Book", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Comment")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("IdAuthor")
                        .HasColumnType("integer")
                        .HasColumnName("Id_Author");

                    b.Property<int>("IdCategory")
                        .HasColumnType("integer")
                        .HasColumnName("Id_Category");

                    b.Property<int>("IdPress")
                        .HasColumnType("integer")
                        .HasColumnName("Id_Press");

                    b.Property<int>("IdThemes")
                        .HasColumnType("integer")
                        .HasColumnName("Id_Themes");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("Pages")
                        .HasColumnType("integer");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<int>("YearPress")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("IdAuthor");

                    b.HasIndex("IdCategory");

                    b.HasIndex("IdPress");

                    b.HasIndex("IdThemes");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("DB_First.Department", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.HasKey("Id");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("DB_First.Faculty", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.ToTable("Faculties");
                });

            modelBuilder.Entity("DB_First.Group", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<int>("IdFaculty")
                        .HasColumnType("integer")
                        .HasColumnName("Id_Faculty");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.HasKey("Id");

                    b.HasIndex("IdFaculty");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("DB_First.Lib", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.HasKey("Id");

                    b.ToTable("Libs");
                });

            modelBuilder.Entity("DB_First.Press", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.HasKey("Id");

                    b.ToTable("Press", (string)null);
                });

            modelBuilder.Entity("DB_First.SCard", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DateIn")
                        .HasColumnType("date");

                    b.Property<DateTime>("DateOut")
                        .HasColumnType("date");

                    b.Property<int>("IdBook")
                        .HasColumnType("integer")
                        .HasColumnName("Id_Book");

                    b.Property<int>("IdLib")
                        .HasColumnType("integer")
                        .HasColumnName("Id_Lib");

                    b.Property<int>("IdStudent")
                        .HasColumnType("integer")
                        .HasColumnName("Id_Student");

                    b.HasKey("Id");

                    b.HasIndex("IdBook");

                    b.HasIndex("IdLib");

                    b.HasIndex("IdStudent");

                    b.ToTable("S_Cards", (string)null);
                });

            modelBuilder.Entity("DB_First.Student", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<int>("IdGroup")
                        .HasColumnType("integer")
                        .HasColumnName("Id_Group");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<int>("Term")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("IdGroup");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("DB_First.TCard", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DateIn")
                        .HasColumnType("date");

                    b.Property<DateTime>("DateOut")
                        .HasColumnType("date");

                    b.Property<int>("IdBook")
                        .HasColumnType("integer")
                        .HasColumnName("Id_Book");

                    b.Property<int>("IdLib")
                        .HasColumnType("integer")
                        .HasColumnName("Id_Lib");

                    b.Property<int>("IdTeacher")
                        .HasColumnType("integer")
                        .HasColumnName("Id_Teacher");

                    b.HasKey("Id");

                    b.HasIndex("IdBook");

                    b.HasIndex("IdLib");

                    b.HasIndex("IdTeacher");

                    b.ToTable("T_Cards", (string)null);
                });

            modelBuilder.Entity("DB_First.Teacher", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<int>("IdDep")
                        .HasColumnType("integer")
                        .HasColumnName("Id_Dep");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.HasKey("Id");

                    b.HasIndex("IdDep");

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("DB_First.Theme", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.HasKey("Id");

                    b.ToTable("Themes");
                });

            modelBuilder.Entity("DB_First.Concrete.Book", b =>
                {
                    b.HasOne("DB_First.Concrete.Author", "IdAuthorNavigation")
                        .WithMany("Books")
                        .HasForeignKey("IdAuthor")
                        .IsRequired()
                        .HasConstraintName("FK_Books_Author");

                    b.HasOne("DB_First.Category", "IdCategoryNavigation")
                        .WithMany("Books")
                        .HasForeignKey("IdCategory")
                        .IsRequired()
                        .HasConstraintName("FK_Books_Category");

                    b.HasOne("DB_First.Press", "IdPressNavigation")
                        .WithMany("Books")
                        .HasForeignKey("IdPress")
                        .IsRequired()
                        .HasConstraintName("FK_Books_Press");

                    b.HasOne("DB_First.Theme", "IdThemesNavigation")
                        .WithMany("Books")
                        .HasForeignKey("IdThemes")
                        .IsRequired()
                        .HasConstraintName("FK_Books_Theme");

                    b.Navigation("IdAuthorNavigation");

                    b.Navigation("IdCategoryNavigation");

                    b.Navigation("IdPressNavigation");

                    b.Navigation("IdThemesNavigation");
                });

            modelBuilder.Entity("DB_First.Group", b =>
                {
                    b.HasOne("DB_First.Faculty", "IdFacultyNavigation")
                        .WithMany("Groups")
                        .HasForeignKey("IdFaculty")
                        .IsRequired()
                        .HasConstraintName("FK_Groups_Faculty");

                    b.Navigation("IdFacultyNavigation");
                });

            modelBuilder.Entity("DB_First.SCard", b =>
                {
                    b.HasOne("DB_First.Concrete.Book", "IdBookNavigation")
                        .WithMany("SCards")
                        .HasForeignKey("IdBook")
                        .IsRequired()
                        .HasConstraintName("FK_S_Cards_Book");

                    b.HasOne("DB_First.Lib", "IdLibNavigation")
                        .WithMany("SCards")
                        .HasForeignKey("IdLib")
                        .IsRequired()
                        .HasConstraintName("FK_S_Cards_Lib");

                    b.HasOne("DB_First.Student", "IdStudentNavigation")
                        .WithMany("SCards")
                        .HasForeignKey("IdStudent")
                        .IsRequired()
                        .HasConstraintName("FK_S_Cards_Stud");

                    b.Navigation("IdBookNavigation");

                    b.Navigation("IdLibNavigation");

                    b.Navigation("IdStudentNavigation");
                });

            modelBuilder.Entity("DB_First.Student", b =>
                {
                    b.HasOne("DB_First.Group", "IdGroupNavigation")
                        .WithMany("Students")
                        .HasForeignKey("IdGroup")
                        .IsRequired()
                        .HasConstraintName("FK_Students_Group");

                    b.Navigation("IdGroupNavigation");
                });

            modelBuilder.Entity("DB_First.TCard", b =>
                {
                    b.HasOne("DB_First.Concrete.Book", "IdBookNavigation")
                        .WithMany("TCards")
                        .HasForeignKey("IdBook")
                        .IsRequired()
                        .HasConstraintName("FK_T_Cards_Book");

                    b.HasOne("DB_First.Lib", "IdLibNavigation")
                        .WithMany("TCards")
                        .HasForeignKey("IdLib")
                        .IsRequired()
                        .HasConstraintName("FK_T_Cards_Lib");

                    b.HasOne("DB_First.Teacher", "IdTeacherNavigation")
                        .WithMany("TCards")
                        .HasForeignKey("IdTeacher")
                        .IsRequired()
                        .HasConstraintName("FK_T_Cards_Teacher");

                    b.Navigation("IdBookNavigation");

                    b.Navigation("IdLibNavigation");

                    b.Navigation("IdTeacherNavigation");
                });

            modelBuilder.Entity("DB_First.Teacher", b =>
                {
                    b.HasOne("DB_First.Department", "IdDepNavigation")
                        .WithMany("Teachers")
                        .HasForeignKey("IdDep")
                        .IsRequired()
                        .HasConstraintName("FK_Teachers_Dep");

                    b.Navigation("IdDepNavigation");
                });

            modelBuilder.Entity("DB_First.Category", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("DB_First.Concrete.Author", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("DB_First.Concrete.Book", b =>
                {
                    b.Navigation("SCards");

                    b.Navigation("TCards");
                });

            modelBuilder.Entity("DB_First.Department", b =>
                {
                    b.Navigation("Teachers");
                });

            modelBuilder.Entity("DB_First.Faculty", b =>
                {
                    b.Navigation("Groups");
                });

            modelBuilder.Entity("DB_First.Group", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("DB_First.Lib", b =>
                {
                    b.Navigation("SCards");

                    b.Navigation("TCards");
                });

            modelBuilder.Entity("DB_First.Press", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("DB_First.Student", b =>
                {
                    b.Navigation("SCards");
                });

            modelBuilder.Entity("DB_First.Teacher", b =>
                {
                    b.Navigation("TCards");
                });

            modelBuilder.Entity("DB_First.Theme", b =>
                {
                    b.Navigation("Books");
                });
#pragma warning restore 612, 618
        }
    }
}
